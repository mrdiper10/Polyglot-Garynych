from aiogram import types
from aiogram.fsm.context import FSMContext
from database import get_words, get_words_count_by_language, clear_user_dictionary
from keyboards import main_menu_keyboard
from handlers import grammar, grammar_german, grammar_french, words

async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def cmd_add_words(message: types.Message, state: FSMContext):
    await words.cmd_add_word_start(message, state)

async def cmd_show_dictionary(message: types.Message):
    user_id = message.from_user.id
    words = get_words(user_id)
    if not words:
        await message.answer("–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
        return

    msg = "–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å:\n\n"
    for lang in ["–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "–Ω–µ–º–µ—Ü–∫–∏–π", "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"]:
        msg += f"--- {lang.title()} ---\n"
        lang_words = [w for w in words if w[2] == lang]  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —è–∑—ã–∫ –≤ 3-–º —ç–ª–µ–º–µ–Ω—Ç–µ
        if not lang_words:
            msg += "–°–ª–æ–≤ –Ω–µ—Ç.\n"
            continue
        for word, translation, language, known in lang_words:
            if translation:
                msg += f"{word} - {translation}\n"
            else:
                msg += f"{word} - [–Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞]\n"
        msg += "\n"

    await message.answer(msg)

async def cmd_clear_dictionary(message: types.Message):
    user_id = message.from_user.id
    clear_user_dictionary(user_id)
    await message.answer("–¢–≤–æ–π —Å–ª–æ–≤–∞—Ä—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.")

async def cmd_progress(message: types.Message):
    user_id = message.from_user.id
    languages = ["–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "–Ω–µ–º–µ—Ü–∫–∏–π", "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π"]
    texts = []
    for lang in languages:
        total, known = get_words_count_by_language(user_id, lang)
        if total == 0:
            texts.append(f"{lang.title()}: —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.")
        else:
            percent = (known / total) * 100
            texts.append(f"{lang.title()}: {known} –∏–∑ {total} —Å–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ ({percent:.1f}%)")
    await message.answer("\n".join(texts))

async def cmd_help(message: types.Message):
    help_text = (
        "üìö *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*\n\n"
        "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥.\n"
        "‚Ä¢ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫—É.\n"
        "‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è.\n"
        "‚Ä¢ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –≤—ã—É—á–µ–Ω–æ –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
        "‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (–∞–Ω–≥–ª.) - –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É.\n"
        "‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (–Ω–µ–º.) - –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏ –ø–æ –Ω–µ–º–µ—Ü–∫–æ–º—É —è–∑—ã–∫—É.\n"
        "‚Ä¢ –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª (—Ñ—Ä.) - –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Ä–æ–∫–∏ –ø–æ —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–º—É —è–∑—ã–∫—É.\n"
        "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n"
        "‚Ä¢ /menu - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–∏—à–∏ —Å—é–¥–∞!"
    )
    await message.answer(help_text, parse_mode="Markdown")

async def cmd_grammar(message: types.Message):
    await grammar.grammar_menu(message)

async def cmd_grammar_german(message: types.Message):
    await grammar_german.grammar_menu_german(message)

async def cmd_grammar_french(message: types.Message):
    await grammar_french.grammar_menu_french(message)
