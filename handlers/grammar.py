from aiogram import types
from aiogram.fsm.context import FSMContext

rules = [
    {
        "title": "–ê—Ä—Ç–∏–∫–ª—å a/an",
        "body": "–ê—Ä—Ç–∏–∫–ª—å a/an –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å –∏—Å—á–∏—Å–ª—è–µ–º—ã–º–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ. A - –ø–µ—Ä–µ–¥ —Å–æ–≥–ª–∞—Å–Ω—ã–º –∑–≤—É–∫–æ–º, an - –ø–µ—Ä–µ–¥ –≥–ª–∞—Å–Ω—ã–º –∑–≤—É–∫–æ–º.",
        "tasks": [
            "–í—Å—Ç–∞–≤—å—Ç–µ a –∏–ª–∏ an: ___ apple, ___ book, ___ orange, ___ cat.",
            "–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: '–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–Ω–∏–≥–∞.'"
        ]
    },
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
]

async def grammar_menu(message: types.Message):
    text = "üìö *–ü—Ä–∞–≤–∏–ª–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:*\n\n"
    for i, rule in enumerate(rules, start=1):
        text += f"{i}. {rule['title']}\n"
    text += "\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏, –∏–ª–∏ /menu –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."
    await message.answer(text, parse_mode="Markdown")

async def show_rule(message: types.Message, state: FSMContext):
    try:
        num = int(message.text.strip())
        if 1 <= num <= len(rules):
            rule = rules[num - 1]
            await message.answer(f"*{rule['title']}*\n\n{rule['body']}", parse_mode="Markdown")
            # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ!
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ /menu.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ /menu.")

async def show_tasks(message: types.Message, state: FSMContext):
    try:
        num = int(message.text.strip())
        if 1 <= num <= len(rules):
            tasks = rules[num - 1].get("tasks", [])
            if not tasks:
                await message.answer("–î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã.")
                return
            text = f"üìù *–ó–∞–¥–∞–Ω–∏—è –∫ –ø—Ä–∞–≤–∏–ª—É {num} - {rules[num - 1]['title']}:*\n\n"
            text += "\n".join(f"{i+1}. {task}" for i, task in enumerate(tasks))
            await message.answer(text, parse_mode="Markdown")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ /menu.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –∏–ª–∏ /menu.")
